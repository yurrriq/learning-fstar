/// =============
///  Exercise 1a
/// =============

(**
@summary Verified programming in F*: Exercise 1a
*)
module Ex01a

open FStar.Exn
open FStar.All
module IO = FStar.IO

/// Type Synonyms
/// =============
///
/// Define a type synonym to model `filename`_\ s as ``string``\ s.
///
/// .. _filename:

(** A filename is a string. *)
type filename = string

/// Known Files
/// ===========
///
/// Define some known `filename`_\ s.

let passwd : filename = "demo/password"

/// .. _readme:

let readme : filename = "demo/README"

/// .. _tmp:

let tmp    : filename = "demo/tempfile"

/// Access Control Predicates
/// =========================
///
/// For this exercise, only `tmp`_ is writeable.
///
/// .. _canWrite:

(** Determine whether a file can be written. *)
val canWrite : filename -> Tot bool
let canWrite = function
  | "demo/tempfile" -> true
  | _               -> false

/// A file is readable if it satisfies `canWrite`_ or is `readme_`.
///
/// .. _canRead:

(** Determine if a file can be read. *)
val canRead : filename -> Tot bool
let canRead (f:filename) =
  canWrite f ||
  f = "demo/README"

/// Mocked File IO
/// ==============
///
/// Since we're only focused on type predicates, define a dummy
/// `read`_ function, such that the type checker prevents any calls
/// for for which `canRead`_ can't be statically proved for the
/// argument.
///
/// .. _read:

(** Read a file. *)
val read : f:filename{canRead f} -> ML string
let read f =
  IO.print_string ("Dummy read of file " ^ f ^ "\n");
  f

/// .. _write_:

(** Write a string [s] to a file [f], ensuring it is writeable. *)
val write : f:filename{canWrite f} -> string -> ML unit
let write f s = IO.print_string ("Dummy write of string " ^ s ^ " to file " ^ f ^ "\n")

/// Static Checking
/// ===============

val staticChecking : unit -> ML unit
let staticChecking () =
  let v1 = read tmp in
  let v2 = read readme in
  write tmp "hello!"

/// The following would **not** pass the type checker.
///
/// .. code-block:: fsharp
///
///   read passwd;        // invalid read
///   write passwd "junk" // invalid write
///
/// Dynamic Checking
/// ================

exception InvalidRead

val checkedRead : filename -> ML string
let checkedRead f =
  if canRead f
    then read f
    else raise InvalidRead


exception InvalidWrite

val checkedWrite : filename -> string -> ML unit
let checkedWrite f s =
  if canWrite f
    then write f s
    else raise InvalidWrite


let dynamicChecking () =
  let v1 = checkedRead tmp in
  let v2 = checkedRead readme in
  let v3 = checkedRead passwd in
  checkedWrite tmp "hello!";
  checkedWrite passwd "junk"

/// Main
/// ====

let main =
  staticChecking ();
  dynamicChecking ()
